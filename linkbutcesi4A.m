% Generated by MATLAB(R) 23.2 (R2023b) and Satellite Communications Toolbox 23.2 (R2023b).
% Generated on: 02-Aug-2024 10:45:53

%% Link Details
% Link         L1 L2
% Transmitter  G1 S2
% Receiver     S1 G2

%% Ground station (G1) properties
g1.Latitude = 13.8; % deg
g1.Longitude = 42; % deg
g1.Altitude = 974; % m

%% Satellite (S1) properties
s1.Latitude = 0.0307; % deg
s1.Longitude = 42; % deg
s1.Altitude = 36000; % km

%% Ground station (G1) transmitter properties
tx1.TxFeederLoss = 1; % dB
tx1.OtherTxLosses = 12.67; % dB
tx1.TxHPAPower = 24.45; % dBW
tx1.TxHPAOBO = 6; % dB
tx1.TxAntennaGain = 49.36; % dBi

%% Satellite (S1) receiver properties
rx1.InterferenceLoss = 2; % dB
rx1.RxGByT = 6; % dB/K
rx1.RxFeederLoss = 1; % dB
rx1.OtherRxLosses = 0; % dB

%% Link (L1) properties
l1.Frequency = 14.5; % GHz
l1.Bandwidth = 36; % MHz
l1.BitRate = 45; % Mbps
l1.RequiredEbByNo = 7.91; % dB
l1.PolarizationMismatch = 2; % deg
l1.ImplementationLoss = 0; % dB
l1.AntennaMispointingLoss = 0; % dB
l1.RadomeLoss = 0; % dB

%% Satellite (S2) properties
s2.Latitude = 0.0307; % deg
s2.Longitude = 42; % deg
s2.Altitude = 36000; % km

%% Ground station (G2) properties
g2.Latitude = 2; % deg
g2.Longitude = 69; % deg
g2.Altitude = 974; % m

%% Satellite (S2) transmitter properties
tx2.TxFeederLoss = 1; % dB
tx2.OtherTxLosses = 1; % dB
tx2.TxHPAPower = 20.79; % dBW
tx2.TxHPAOBO = 3; % dB
tx2.TxAntennaGain = 42.8; % dBi

%% Ground station (G2) receiver properties
rx2.InterferenceLoss = 1; % dB
rx2.RxGByT = 4.38; % dB/K
rx2.RxFeederLoss = 0; % dB
rx2.OtherRxLosses = 0; % dB

%% Link (L2) properties
l2.Frequency = 11; % GHz
l2.Bandwidth = 30; % MHz
l2.BitRate = 45; % Mbps
l2.RequiredEbByNo = 7.93; % dB
l2.PolarizationMismatch = 2; % deg
l2.ImplementationLoss = 2; % dB
l2.AntennaMispointingLoss = 0; % dB
l2.RadomeLoss = 0; % dB

%% Calculate and visualize link budget results
res1 = calculateLinkBudget(g1,s1,tx1,rx1,l1);
res2 = calculateLinkBudget(g2,s2,tx2,rx2,l2);
colName = {'Tag','Name', 'L1','L2'};
colWidthData = 2*(10-3*1.5 -1);
width = strcat(num2str(colWidthData),'x');
ColumnWidth = {'2x',width,'3x'};
colFormat = {'char','char','numeric'};
res = [res1 res2];
data = {'N1','Distance (km)',res.Distance;...
    'N2','Elevation (deg)',res.Elevation;...
    'N3','Tx EIRP (dBW)',res.TxEIRP;...
    'N4','Polarization loss (dB)',res.PolarizationLoss;...
    'N5','FSPL (dB)',res.FSPL;...
    'N6','Received isotropic power (dBW)',res.ReceivedIsotropicPower;...
    'N7','C/No (dB-Hz)',res.CByNo;...
    'N8','C/N (dB)',res.CByN;...
    'N9','Received Eb/No (dB)',res.ReceivedEbByNo;...
    'N10','Margin (dB)',res.Margin};
fig = uifigure('Name','Link Budget');
uit = uitable(fig,'units','normalized',...
    'Position',[0 0 1 1],'RowName',{},...
    'ColumnName',colName,'ColumnWidth',ColumnWidth,...
    'ColumnFormat',colFormat,'Data',data);

%% FSPL line plot
nData = 9;
midPoint = ceil(nData/2);
xCurrentValue = zeros(length(res),1);
yCurrentValue = zeros(length(res),1);
hFig = uifigure('Name','FSPL');
hAx = axes('Parent', hFig);
spec = {g1;g2};
sat = {s1;s2};
tx = {tx1;tx2};
rx = {rx1;rx2};
lnk = {l1;l2};
lnkName = {'L1','L2','Operating Point'};
for ii = 1:length(res)
    yCurrentValue(ii) = res(ii).FSPL;
    xCurrentValue(ii) = res(ii).Distance;
    stepSize = xCurrentValue(ii)/midPoint;
    vectorSpecValue = (1:nData)'* stepSize;
    resultLine = calculateLinkBudget(spec{ii},sat{ii},tx{ii},rx{ii},lnk{ii},vectorSpecValue);
    plot(hAx,resultLine.Distance,resultLine.FSPL);
    hold(hAx,'on');
    grid(hAx,'on');
end
plot(hAx,xCurrentValue,yCurrentValue, 'r*');
legend(hAx,lnkName, 'Location', 'southeast');
hAx.XLabel.String = 'Distance (km)';
hAx.YLabel.String = 'Free space path loss (dB)';

%% Margin contour plot
for ii = 1:length(res)
    txContour  = tx{ii};
    xCurrentValue = txContour.TxHPAPower;
    xStepSize = xCurrentValue/midPoint;
    if stepSize == 0
        xValues = -1*floor(nData/2):floor(nData/2);
        txContour.TxHPAPower = xValues(1:nData);
    else
        txContour.TxHPAPower = sort((1:nData) * xStepSize);
    end
    yCurrentValue = res(ii).Distance;
    yStepSize = yCurrentValue/midPoint;
    vectorSpecValue = (1:nData)'* yStepSize;
    resultContour = calculateLinkBudget(spec{ii},sat{ii},txContour,rx{ii},lnk{ii},vectorSpecValue);
    hFig = uifigure('Name',['Margin - ' lnkName{ii}]);
    hAx = axes('Parent', hFig);
    grid(hAx,'on');
    contour(hAx,txContour.TxHPAPower,resultContour.Distance,resultContour.Margin,'ShowText','on');
    hold(hAx,'on');
    plot(hAx,xCurrentValue,yCurrentValue, 'r*');
    legend(hAx,{'Margin (dB)', 'Operating Point'});
    hAx.XLabel.String = 'Tx HPA power (dBW)';
    hAx.YLabel.String = 'Distance (km)';
    hAx.ZLabel.String = 'Margin (dB)';
end

%% Local function for calculating link budget
function res = calculateLinkBudget(spec,sat,tx,rx,lnk,varargin)
assignin("base","struct1",spec);
assignin("base","struct2",sat);
assignin("base","struct3",tx);
assignin("base","struct4",rx);
assignin("base","struct5",lnk);
resultProperty = [];
if nargin == 7
    resultProperty = varargin{1};
    resultValue = varargin{2};
end
if nargin == 6
    vectorSpecValue = varargin{1};
    evalin("base",sprintf("%s = %s;","temp.Distance",mat2str(vectorSpecValue)))
else
    if any(strcmp(resultProperty,'Distance'))
        evalin("base",sprintf("%s = %f;","temp.Distance",resultValue(strcmp(resultProperty,'Distance'))))
    else
        evalin("base",sprintf("%s = %s;","temp.Distance", "satcom.internal.linkbudgetApp.computeDistance(struct1.Latitude, struct1.Longitude, struct1.Altitude, struct2.Latitude, struct2.Longitude, struct2.Altitude*1e3)"))
    end
end
if any(strcmp(resultProperty,'Elevation'))
    evalin("base",sprintf("%s = %f;","temp.Elevation",resultValue(strcmp(resultProperty,'Elevation'))))
else
    evalin("base",sprintf("%s = %s;","temp.Elevation", "satcom.internal.linkbudgetApp.computeElevation(struct1.Latitude, struct1.Longitude, struct1.Altitude, struct2.Latitude, struct2.Longitude, struct2.Altitude*1e3)"))
end
if any(strcmp(resultProperty,'TxEIRP'))
    evalin("base",sprintf("%s = %f;","temp.TxEIRP",resultValue(strcmp(resultProperty,'TxEIRP'))))
else
    evalin("base",sprintf("%s = %s;","temp.TxEIRP", "struct3.TxHPAPower - struct3.TxHPAOBO - struct3.TxFeederLoss - struct3.OtherTxLosses + struct3.TxAntennaGain - struct5.RadomeLoss"))
end
if any(strcmp(resultProperty,'PolarizationLoss'))
    evalin("base",sprintf("%s = %f;","temp.PolarizationLoss",resultValue(strcmp(resultProperty,'PolarizationLoss'))))
else
    evalin("base",sprintf("%s = %s;","temp.PolarizationLoss", "20 * abs(log10(cosd(struct5.PolarizationMismatch)))"))
end
if any(strcmp(resultProperty,'FSPL'))
    evalin("base",sprintf("%s = %f;","temp.FSPL",resultValue(strcmp(resultProperty,'FSPL'))))
else
    evalin("base",sprintf("%s = %s;","temp.FSPL", "fspl(temp.Distance * 1e3, physconst('LightSpeed') ./ (struct5.Frequency*1e9))"))
end
if any(strcmp(resultProperty,'ReceivedIsotropicPower'))
    evalin("base",sprintf("%s = %f;","temp.ReceivedIsotropicPower",resultValue(strcmp(resultProperty,'ReceivedIsotropicPower'))))
else
    evalin("base",sprintf("%s = %s;","temp.ReceivedIsotropicPower", "temp.TxEIRP - temp.PolarizationLoss - temp.FSPL - struct4.InterferenceLoss - struct5.AntennaMispointingLoss"))
end
if any(strcmp(resultProperty,'CByNo'))
    evalin("base",sprintf("%s = %f;","temp.CByNo",resultValue(strcmp(resultProperty,'CByNo'))))
else
    evalin("base",sprintf("%s = %s;","temp.CByNo", "temp.ReceivedIsotropicPower + struct4.RxGByT - 10*log10(physconst('Boltzmann')) - struct4.RxFeederLoss - struct4.OtherRxLosses"))
end
if any(strcmp(resultProperty,'CByN'))
    evalin("base",sprintf("%s = %f;","temp.CByN",resultValue(strcmp(resultProperty,'CByN'))))
else
    evalin("base",sprintf("%s = %s;","temp.CByN", "temp.CByNo - 10*log10(struct5.Bandwidth) - 60"))
end
if any(strcmp(resultProperty,'ReceivedEbByNo'))
    evalin("base",sprintf("%s = %f;","temp.ReceivedEbByNo",resultValue(strcmp(resultProperty,'ReceivedEbByNo'))))
else
    evalin("base",sprintf("%s = %s;","temp.ReceivedEbByNo", "temp.CByNo - 10*log10(struct5.BitRate) - 60"))
end
if any(strcmp(resultProperty,'Margin'))
    evalin("base",sprintf("%s = %f;","temp.Margin",resultValue(strcmp(resultProperty,'Margin'))))
else
    evalin("base",sprintf("%s = %s;","temp.Margin", "temp.ReceivedEbByNo - struct5.RequiredEbByNo - struct5.ImplementationLoss"))
end
res = evalin("base","temp");
evalin("base","clear struct1 struct2 struct3 struct4 struct5 temp");
end